// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/com/mycompany/analizadorsintactico/archivo.flex

package com.mycompany.analizadorsintactico;

//Seccion de imports
import com.mycompany.analizadorsintactico.token.Token;
import com.mycompany.analizadorsintactico.token.TipoToken;
import java.util.ArrayList;
import java.util.List;


@SuppressWarnings("fallthrough")
public class AnalizadorLexico1 {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int FINAL = 2;
  public static final int ERROR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\3\1\2\22\0\1\4\6\0"+
    "\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\10"+
    "\12\14\1\0\1\15\1\16\1\17\1\16\2\0\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\5\0\1\51\1\0\32\52\12\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\6\1\10\1\11\1\12\1\13\1\14\25\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\22"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\2\33"+
    "\1\34\1\0\1\35\3\0\1\13\3\0\1\36\3\0"+
    "\1\37\13\0\1\40\10\0\1\41\1\42\15\0\1\26"+
    "\1\0\1\34\1\0\1\43\1\44\1\45\1\0\1\42"+
    "\1\46\1\47\24\0\1\50\1\0\1\51\7\0\1\52"+
    "\11\0\1\53\1\54\12\0\1\55\2\0\1\56\1\57"+
    "\2\0\1\60\3\0\1\61\1\62\1\0\1\63\7\0"+
    "\1\64\1\65\1\66\6\0\1\67\13\0\1\70\2\0"+
    "\1\71\1\0\1\72\4\0\1\73\4\0\1\74\1\0"+
    "\1\75\2\0\1\76\1\0\1\77\2\0\1\100\1\101"+
    "\1\0\1\102\4\0\1\103\1\104\1\105\1\106\1\107"+
    "\2\0\1\110\1\111\2\0\1\112\1\113\1\114\1\115"+
    "\1\116\1\0\1\117\2\0\1\120\5\0\1\121\1\122"+
    "\1\0\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\201\0\201\0\254\0\201"+
    "\0\201\0\201\0\201\0\327\0\201\0\u0102\0\201\0\u012d"+
    "\0\201\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2"+
    "\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\201"+
    "\0\201\0\201\0\201\0\201\0\201\0\u050a\0\201\0\201"+
    "\0\u0535\0\201\0\201\0\201\0\201\0\201\0\u0560\0\u058b"+
    "\0\u05b6\0\201\0\u05e1\0\u060c\0\u0637\0\201\0\u0662\0\u068d"+
    "\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\201\0\u078f\0\u07ba"+
    "\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912"+
    "\0\u093d\0\201\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f"+
    "\0\u0a6a\0\u0a95\0\201\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4"+
    "\0\u0cef\0\201\0\u0d1a\0\201\0\u0d45\0\u0d70\0\u0637\0\201"+
    "\0\u0d9b\0\201\0\201\0\201\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47"+
    "\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f"+
    "\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7"+
    "\0\201\0\u1122\0\201\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9"+
    "\0\u1224\0\u124f\0\201\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326"+
    "\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e"+
    "\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6"+
    "\0\201\0\u1601\0\u162c\0\201\0\201\0\u1657\0\u1682\0\201"+
    "\0\u16ad\0\u16d8\0\u1703\0\201\0\201\0\u172e\0\201\0\u1759"+
    "\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\201\0\201"+
    "\0\201\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\201"+
    "\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5"+
    "\0\u1ae0\0\u1b0b\0\u1b36\0\201\0\u1b61\0\u1b8c\0\201\0\u1bb7"+
    "\0\201\0\u1be2\0\u1c0d\0\u1c38\0\u1c63\0\201\0\u1c8e\0\u1cb9"+
    "\0\u1ce4\0\u1d0f\0\201\0\u1d3a\0\201\0\u1d65\0\u1d90\0\201"+
    "\0\u1dbb\0\201\0\u1de6\0\u1e11\0\201\0\201\0\u1e3c\0\201"+
    "\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\201\0\201\0\201\0\201"+
    "\0\201\0\u1f13\0\u1f3e\0\201\0\201\0\u1f69\0\u1f94\0\201"+
    "\0\201\0\201\0\201\0\201\0\u1fbf\0\201\0\u1fea\0\u2015"+
    "\0\201\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec\0\201\0\201"+
    "\0\u2117\0\201";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\4\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\4"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\3\4\1\47"+
    "\1\50\2\51\1\6\1\51\1\50\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\50\1\60\1\61\1\62\33\50"+
    "\1\63\2\64\1\6\1\64\1\63\2\65\1\66\1\65"+
    "\1\67\1\65\1\63\1\65\1\70\1\65\33\63\53\0"+
    "\5\71\1\72\6\71\1\73\36\71\4\0\1\74\61\0"+
    "\1\75\1\16\55\0\1\76\56\0\1\77\7\0\1\100"+
    "\1\0\1\101\4\0\1\102\2\0\1\103\35\0\1\104"+
    "\5\0\1\105\11\0\1\106\22\0\1\107\15\0\1\110"+
    "\2\0\1\111\31\0\1\112\3\0\1\113\14\0\1\114"+
    "\60\0\1\115\23\0\1\116\15\0\1\117\2\0\1\120"+
    "\52\0\1\121\36\0\1\122\7\0\1\123\53\0\1\124"+
    "\40\0\1\125\56\0\1\126\42\0\1\127\7\0\1\130"+
    "\60\0\1\131\5\0\1\132\43\0\1\133\3\0\1\134"+
    "\52\0\1\135\35\0\1\136\52\0\1\137\17\0\1\140"+
    "\26\0\1\141\3\0\1\142\14\0\1\143\6\0\1\144"+
    "\37\0\1\145\1\0\1\146\33\0\1\147\61\0\1\150"+
    "\37\0\1\47\34\0\2\47\4\0\1\151\65\0\1\152"+
    "\37\0\1\153\65\0\1\154\33\0\5\71\1\72\52\71"+
    "\1\72\6\71\1\155\36\71\12\0\1\156\54\0\1\157"+
    "\61\0\1\160\72\0\1\161\32\0\1\162\51\0\1\163"+
    "\56\0\1\164\52\0\1\165\62\0\1\166\56\0\1\167"+
    "\43\0\1\170\1\0\1\171\6\0\1\172\32\0\1\173"+
    "\71\0\1\174\31\0\1\175\10\0\1\176\6\0\1\177"+
    "\46\0\1\200\44\0\1\201\55\0\1\202\60\0\1\203"+
    "\47\0\1\204\52\0\1\205\56\0\1\206\1\207\37\0"+
    "\1\210\72\0\1\211\36\0\1\212\65\0\1\164\40\0"+
    "\1\164\60\0\1\213\42\0\1\214\1\215\41\0\1\216"+
    "\57\0\1\217\47\0\1\220\60\0\1\221\5\0\1\222"+
    "\1\0\1\223\43\0\1\164\37\0\1\224\100\0\1\225"+
    "\47\0\1\226\45\0\1\227\43\0\1\230\45\0\1\231"+
    "\62\0\1\232\5\0\1\233\35\0\1\234\40\0\1\235"+
    "\52\0\1\236\40\0\5\71\1\72\6\71\1\237\36\71"+
    "\2\156\2\0\47\156\24\0\1\240\56\0\1\241\55\0"+
    "\1\242\41\0\1\243\74\0\1\244\50\0\1\245\45\0"+
    "\1\246\35\0\1\247\52\0\1\250\3\0\1\251\56\0"+
    "\1\252\46\0\1\253\50\0\1\254\67\0\1\255\55\0"+
    "\1\256\52\0\1\226\34\0\1\257\62\0\1\260\62\0"+
    "\1\261\32\0\1\262\52\0\1\263\11\0\1\264\51\0"+
    "\1\265\45\0\1\266\55\0\1\267\43\0\1\270\52\0"+
    "\1\271\62\0\1\272\42\0\1\273\52\0\1\274\56\0"+
    "\1\275\55\0\1\276\62\0\1\277\33\0\1\300\52\0"+
    "\1\301\66\0\1\302\32\0\1\303\76\0\1\304\30\0"+
    "\1\305\71\0\1\306\11\0\2\235\2\0\47\235\2\236"+
    "\2\0\47\236\5\71\1\72\6\71\1\307\36\71\41\0"+
    "\1\310\46\0\1\311\41\0\1\312\46\0\1\313\66\0"+
    "\1\314\61\0\1\315\52\0\1\164\52\0\1\316\30\0"+
    "\1\317\65\0\1\320\61\0\1\321\52\0\1\322\37\0"+
    "\1\323\61\0\1\324\54\0\1\325\37\0\1\326\67\0"+
    "\1\327\50\0\1\330\52\0\1\331\31\0\1\332\73\0"+
    "\1\333\33\0\1\334\50\0\1\335\56\0\1\336\72\0"+
    "\1\337\51\0\1\340\33\0\1\341\55\0\1\342\47\0"+
    "\1\343\26\0\5\71\1\72\4\71\1\344\40\71\43\0"+
    "\1\345\27\0\1\346\55\0\1\347\64\0\1\350\56\0"+
    "\1\351\35\0\1\352\46\0\1\353\52\0\1\354\56\0"+
    "\1\355\70\0\1\356\36\0\1\357\67\0\1\360\33\0"+
    "\1\361\56\0\1\362\63\0\1\363\35\0\1\364\71\0"+
    "\1\365\42\0\1\366\43\0\1\367\52\0\1\370\70\0"+
    "\1\371\30\0\1\372\32\0\5\71\1\72\6\71\1\373"+
    "\36\71\35\0\1\374\41\0\1\375\46\0\1\376\74\0"+
    "\1\377\43\0\1\u0100\54\0\1\u0101\56\0\1\u0102\33\0"+
    "\1\u0103\100\0\1\u0104\37\0\1\u0105\56\0\1\u0106\11\0"+
    "\5\71\1\72\6\71\1\u0107\36\71\30\0\1\u0108\46\0"+
    "\1\u0109\50\0\1\u010a\30\0\5\71\1\72\4\71\1\u010b"+
    "\40\71\35\0\1\u010c\41\0\1\u010d\26\0\5\71\1\72"+
    "\6\71\1\u010e\36\71\43\0\1\u010f\51\0\1\u0110\10\0"+
    "\5\71\1\72\6\71\1\u0111\43\71\1\u0112\45\71";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8514];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\11\1\1\4\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\26\1\6\11\1\1\2\11\1\1\5\11"+
    "\2\1\1\0\1\11\3\0\1\11\3\0\1\1\3\0"+
    "\1\11\13\0\1\11\10\0\1\11\1\1\15\0\1\11"+
    "\1\0\1\11\1\0\2\1\1\11\1\0\3\11\24\0"+
    "\1\11\1\0\1\11\7\0\1\11\11\0\2\1\12\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\2\11\1\0"+
    "\1\11\7\0\3\11\6\0\1\11\13\0\1\11\2\0"+
    "\1\11\1\0\1\11\4\0\1\11\4\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\1\11\2\0\2\11\1\0"+
    "\1\11\4\0\5\11\2\0\2\11\2\0\5\11\1\0"+
    "\1\11\2\0\1\11\5\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

// Codigo Java

    private List<Token> lista = new ArrayList<>();
    private List<Token> listaErrores = new ArrayList<>();
    private TipoToken tipo;
    private int fila;
    private int columna;
    private String lexema;

    private void addList(TipoToken tipo) {
        Token token = new Token();
        token.setFila(fila + 1);
        token.setColumna(columna + 1);
        token.setToken(tipo);
        token.setLexema(lexema);
        lista.add(token);
    }

    private void addListaErrores() {
        Token token = new Token();
        token.setFila(fila + 1);
        token.setColumna(columna + 1);
        token.setToken(TipoToken.ERROR);
        token.setLexema(lexema);
        lista.add(token);
        listaErrores.add(token);
    }

    public List<Token> getLista(){
        return lista;
    }
    
    public List<Token> getListaErrores(){
        return listaErrores;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico1(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { lexema = yytext(); yybegin(ERROR); fila=yyline; columna = yycolumn;
            }
          // fall through
          case 84: break;
          case 2:
            { /* no hacer nada */
            }
          // fall through
          case 85: break;
          case 3:
            { System.out.print(yytext());
            }
          // fall through
          case 86: break;
          case 4:
            { lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.PAREMTESIS_A);
            }
          // fall through
          case 87: break;
          case 5:
            { lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.PAREMTESIS_B);
            }
          // fall through
          case 88: break;
          case 6:
            { lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.ARITMETICO);
            }
          // fall through
          case 89: break;
          case 7:
            { lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.SIGNOS_COMA);
            }
          // fall through
          case 90: break;
          case 8:
            { lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.SIGNOS_PUNTO);
            }
          // fall through
          case 91: break;
          case 9:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.ENTERO; yybegin(FINAL);
            }
          // fall through
          case 92: break;
          case 10:
            { lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.SIGNOS_PUNTO_Y_COMA);
            }
          // fall through
          case 93: break;
          case 11:
            { lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.RELACIONAL);
            }
          // fall through
          case 94: break;
          case 12:
            { lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.SIGNOS_IGUAL);
            }
          // fall through
          case 95: break;
          case 13:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.IDENTIFICADOR; yybegin(FINAL);
            }
          // fall through
          case 96: break;
          case 14:
            { lexema += yytext(); yybegin(ERROR);
            }
          // fall through
          case 97: break;
          case 15:
            { addList(tipo); yybegin(YYINITIAL);
            }
          // fall through
          case 98: break;
          case 16:
            { addList(tipo); lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.PAREMTESIS_A); yybegin(YYINITIAL);
            }
          // fall through
          case 99: break;
          case 17:
            { addList(tipo); lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.PAREMTESIS_B); yybegin(YYINITIAL);
            }
          // fall through
          case 100: break;
          case 18:
            { addList(tipo); lexema = yytext(); fila=yyline; columna = yycolumn; addList(TipoToken.ARITMETICO); yybegin(YYINITIAL);
            }
          // fall through
          case 101: break;
          case 19:
            { addList(tipo); lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.SIGNOS_COMA); yybegin(YYINITIAL);
            }
          // fall through
          case 102: break;
          case 20:
            { addList(tipo); lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.SIGNOS_PUNTO); yybegin(YYINITIAL);
            }
          // fall through
          case 103: break;
          case 21:
            { addList(tipo); lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.SIGNOS_PUNTO_Y_COMA); yybegin(YYINITIAL);
            }
          // fall through
          case 104: break;
          case 22:
            { addList(tipo); lexema = yytext(); fila=yyline; columna = yycolumn; addList(TipoToken.RELACIONAL); yybegin(YYINITIAL);
            }
          // fall through
          case 105: break;
          case 23:
            { addList(tipo); lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.SIGNOS_IGUAL); yybegin(YYINITIAL);
            }
          // fall through
          case 106: break;
          case 24:
            { lexema += yytext();
            }
          // fall through
          case 107: break;
          case 25:
            { addListaErrores(); yybegin(YYINITIAL);
            }
          // fall through
          case 108: break;
          case 26:
            { addListaErrores(); lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.SIGNOS); yybegin(YYINITIAL);
            }
          // fall through
          case 109: break;
          case 27:
            { addListaErrores(); lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.ARITMETICO); yybegin(YYINITIAL);
            }
          // fall through
          case 110: break;
          case 28:
            { addListaErrores(); lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.RELACIONAL); yybegin(YYINITIAL);
            }
          // fall through
          case 111: break;
          case 29:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.CADENA; yybegin(FINAL);
            }
          // fall through
          case 112: break;
          case 30:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.AS; yybegin(FINAL);
            }
          // fall through
          case 113: break;
          case 31:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.BY; yybegin(FINAL);
            }
          // fall through
          case 114: break;
          case 32:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.IF; yybegin(FINAL);
            }
          // fall through
          case 115: break;
          case 33:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.ON; yybegin(FINAL);
            }
          // fall through
          case 116: break;
          case 34:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.LOGICO; yybegin(FINAL);
            }
          // fall through
          case 117: break;
          case 35:
            { lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.COMENTARIO);
            }
          // fall through
          case 118: break;
          case 36:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.DECIMAL; yybegin(FINAL);
            }
          // fall through
          case 119: break;
          case 37:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.ADD; yybegin(FINAL);
            }
          // fall through
          case 120: break;
          case 38:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.ASC; yybegin(FINAL);
            }
          // fall through
          case 121: break;
          case 39:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.FUNCION_DE_AGREGACION; yybegin(FINAL);
            }
          // fall through
          case 122: break;
          case 40:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.KEY; yybegin(FINAL);
            }
          // fall through
          case 123: break;
          case 41:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.LOGICO_NOT; yybegin(FINAL);
            }
          // fall through
          case 124: break;
          case 42:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.SET; yybegin(FINAL);
            }
          // fall through
          case 125: break;
          case 43:
            { addList(tipo); lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.COMENTARIO); yybegin(YYINITIAL);
            }
          // fall through
          case 126: break;
          case 44:
            { addListaErrores(); lexema = yytext(); fila = yyline; columna = yycolumn; addList(TipoToken.COMENTARIO); yybegin(YYINITIAL);
            }
          // fall through
          case 127: break;
          case 45:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.DATE; yybegin(FINAL);
            }
          // fall through
          case 128: break;
          case 46:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.DESC; yybegin(FINAL);
            }
          // fall through
          case 129: break;
          case 47:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.DROP; yybegin(FINAL);
            }
          // fall through
          case 130: break;
          case 48:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.FROM; yybegin(FINAL);
            }
          // fall through
          case 131: break;
          case 49:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.INTO; yybegin(FINAL);
            }
          // fall through
          case 132: break;
          case 50:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.JOIN; yybegin(FINAL);
            }
          // fall through
          case 133: break;
          case 51:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.NULL; yybegin(FINAL);
            }
          // fall through
          case 134: break;
          case 52:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.TEXT; yybegin(FINAL);
            }
          // fall through
          case 135: break;
          case 53:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.BOOLEANO; yybegin(FINAL);
            }
          // fall through
          case 136: break;
          case 54:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.TYPE; yybegin(FINAL);
            }
          // fall through
          case 137: break;
          case 55:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.ALTER; yybegin(FINAL);
            }
          // fall through
          case 138: break;
          case 56:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.GROUP; yybegin(FINAL);
            }
          // fall through
          case 139: break;
          case 57:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.LIMIT; yybegin(FINAL);
            }
          // fall through
          case 140: break;
          case 58:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.ORDER; yybegin(FINAL);
            }
          // fall through
          case 141: break;
          case 59:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.TABLE; yybegin(FINAL);
            }
          // fall through
          case 142: break;
          case 60:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.WHERE; yybegin(FINAL);
            }
          // fall through
          case 143: break;
          case 61:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.BIGINT; yybegin(FINAL);
            }
          // fall through
          case 144: break;
          case 62:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.COLUMN; yybegin(FINAL);
            }
          // fall through
          case 145: break;
          case 63:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.CREATE; yybegin(FINAL);
            }
          // fall through
          case 146: break;
          case 64:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.DELETE; yybegin(FINAL);
            }
          // fall through
          case 147: break;
          case 65:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.EXIST; yybegin(FINAL);
            }
          // fall through
          case 148: break;
          case 66:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.INSERT; yybegin(FINAL);
            }
          // fall through
          case 149: break;
          case 67:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.SELECT; yybegin(FINAL);
            }
          // fall through
          case 150: break;
          case 68:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.SERIAL; yybegin(FINAL);
            }
          // fall through
          case 151: break;
          case 69:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.UNIQUE; yybegin(FINAL);
            }
          // fall through
          case 152: break;
          case 70:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.UPDATE; yybegin(FINAL);
            }
          // fall through
          case 153: break;
          case 71:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.VALUES; yybegin(FINAL);
            }
          // fall through
          case 154: break;
          case 72:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.BOOLEAN; yybegin(FINAL);
            }
          // fall through
          case 155: break;
          case 73:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.CASCADE; yybegin(FINAL);
            }
          // fall through
          case 156: break;
          case 74:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.DECIMAL_TIPO; yybegin(FINAL);
            }
          // fall through
          case 157: break;
          case 75:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.FOREIGN; yybegin(FINAL);
            }
          // fall through
          case 158: break;
          case 76:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.INTEGER; yybegin(FINAL);
            }
          // fall through
          case 159: break;
          case 77:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.NUMERIC; yybegin(FINAL);
            }
          // fall through
          case 160: break;
          case 78:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.PRIMARY; yybegin(FINAL);
            }
          // fall through
          case 161: break;
          case 79:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.VARCHAR; yybegin(FINAL);
            }
          // fall through
          case 162: break;
          case 80:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.DATABASE; yybegin(FINAL);
            }
          // fall through
          case 163: break;
          case 81:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.CONSTRAINT; yybegin(FINAL);
            }
          // fall through
          case 164: break;
          case 82:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.REFERENCES; yybegin(FINAL);
            }
          // fall through
          case 165: break;
          case 83:
            { lexema = yytext(); fila = yyline; columna = yycolumn; tipo = TipoToken.FECHA; yybegin(FINAL);
            }
          // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico1 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico1 scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico1(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.analizadorsintactico.frontend;

import com.mycompany.analizadorsintactico.AnalizadorLexico1;
import com.mycompany.analizadorsintactico.AnalizadorSintactico;
import com.mycompany.analizadorsintactico.otros.InformeDTO;
import com.mycompany.analizadorsintactico.token.Token;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.text.Element;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;

/**
 *
 * @author rafael-cayax
 */
public class Editor extends javax.swing.JFrame {

    private int numFilas;
    private List<JLabel> filas;
    private List<Token> tokens;
    private List<Token> errores;
    private List<Token> erroreG;
    private AnalizadorSintactico sintactico;
    private List<List<Token>> tablasG;
    private InformeDTO informe;
    private boolean hacer;

    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
        configurarEditor();
        agregarEstilos();
        numFilas = 1;
        hacer = false;
        erroreG = new ArrayList<>();
        informe = new InformeDTO();
        tablasG = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnAnalizar = new javax.swing.JButton();
        info = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        reporteLexico = new javax.swing.JMenuItem();
        erroresSintacticos = new javax.swing.JMenuItem();
        tablasMod = new javax.swing.JMenuItem();
        acciones = new javax.swing.JMenuItem();
        tablas = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAnalizar.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        info.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        info.setText("Fila: 1 Columna: 1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(318, 318, 318)
                .addComponent(btnAnalizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 193, Short.MAX_VALUE)
                .addComponent(info)
                .addGap(68, 68, 68))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnalizar)
                    .addComponent(info))
                .addGap(32, 32, 32))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setMaximumSize(new java.awt.Dimension(50, 32767));
        jPanel3.setMinimumSize(new java.awt.Dimension(50, 100));
        jPanel3.setPreferredSize(new java.awt.Dimension(50, 437));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.Y_AXIS));
        jPanel2.add(jPanel3, java.awt.BorderLayout.LINE_START);

        jScrollPane1.setViewportView(jPanel2);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenuBar1.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N

        jMenu1.setText("Archivo");
        jMenu1.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Guardar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Grafico");
        jMenu2.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Reportes");
        jMenu3.setFont(new java.awt.Font("Liberation Sans", 0, 18)); // NOI18N

        reporteLexico.setText("Reporte Errores Lexicos");
        reporteLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reporteLexicoActionPerformed(evt);
            }
        });
        jMenu3.add(reporteLexico);

        erroresSintacticos.setText("Reporte Errores Sintactico");
        erroresSintacticos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                erroresSintacticosActionPerformed(evt);
            }
        });
        jMenu3.add(erroresSintacticos);

        tablasMod.setText("Reporte Tablas Modificadas");
        jMenu3.add(tablasMod);

        acciones.setText("Reporte De Acciones");
        acciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionesActionPerformed(evt);
            }
        });
        jMenu3.add(acciones);

        tablas.setText("Reporte Tablas");
        tablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tablasActionPerformed(evt);
            }
        });
        jMenu3.add(tablas);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.out.println("guardado");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        analizar();
        sintactico = new AnalizadorSintactico();
        sintactico.analizar(tokens);
        tablasG = sintactico.getTablaC();
        erroreG = sintactico.getErroresS();
        informe = sintactico.getReporte();
        hacer = true;
    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void reporteLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reporteLexicoActionPerformed
        ReporteLexico j = new ReporteLexico();
        j.agregar(errores);
        j.setVisible(true);
    }//GEN-LAST:event_reporteLexicoActionPerformed

    private void tablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tablasActionPerformed
        ReporteTablas reporte = new ReporteTablas();
        reporte.agregar(tablasG);
        reporte.setVisible(true);
    }//GEN-LAST:event_tablasActionPerformed

    private void erroresSintacticosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_erroresSintacticosActionPerformed
        ReporteSintactico re = new ReporteSintactico();
        re.agregar(erroreG);
        re.setVisible(true);
    }//GEN-LAST:event_erroresSintacticosActionPerformed

    private void accionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionesActionPerformed
        ReporteAcciones d = new ReporteAcciones();
        d.agregar(informe);
        d.setVisible(true);
    }//GEN-LAST:event_accionesActionPerformed

    private javax.swing.JTextPane editor;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem acciones;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JMenuItem erroresSintacticos;
    private javax.swing.JLabel info;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem reporteLexico;
    private javax.swing.JMenuItem tablas;
    private javax.swing.JMenuItem tablasMod;
    // End of variables declaration//GEN-END:variables

    private void configurarEditor() {
        editor = new javax.swing.JTextPane();
        filas = new ArrayList<>();
        JLabel primero = new JLabel("1");
        primero.setFont(new java.awt.Font("Liberation Sans", 0, 18));
        jPanel3.add(primero);
        jPanel2.add(editor, java.awt.BorderLayout.CENTER);
        editor.setFont(new java.awt.Font("Liberation Sans", 0, 18));
        editor.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                actualizarCursor();
                editor();
                colorear();
            }
        });
    }

    private void editor() {
        String f = editor.getText() + "f";
        char[] g = f.toCharArray();
        int cantidad = 1;
        for (char c : g) {
            if (c == '\n') {
                cantidad++;
            }
        }
        do {
            if (cantidad != numFilas) {
                if (cantidad < numFilas) {
                    eliminarFila();
                } else if (cantidad > numFilas) {
                    agregarFila();
                }
            }
        } while (cantidad != numFilas);
    }

    private void agregarFila() {
        numFilas++;
        String fila = numFilas + "";
        JLabel nuevaFila = new JLabel(fila);
        nuevaFila.setFont(new java.awt.Font("Liberation Sans", 0, 18));
        jPanel3.add(nuevaFila);
        this.filas.add(nuevaFila);
        this.repaint();
        jPanel3.revalidate();
        jPanel3.repaint();
    }

    private void eliminarFila() {
        numFilas--;
        JLabel fila = filas.removeLast();
        jPanel3.remove(fila);
        this.repaint();
        jPanel3.revalidate();
        jPanel3.repaint();
    }

    private void actualizarCursor() {
        int caretPosition = editor.getCaretPosition();
        int row;
        int col;
        int line = editor.getDocument().getDefaultRootElement().getElementIndex(caretPosition);
        int start = editor.getDocument().getDefaultRootElement().getElement(line).getStartOffset();
        row = line + 1;
        col = caretPosition - start + 1;
        info.setText("Fila: " + row + " Columna: " + col);
        info.repaint();
    }

    private void analizar() {
        String texto = editor.getText() + " ";
        AnalizadorLexico1 analizadorLexico = new AnalizadorLexico1(new StringReader(texto));
        try {
            while (analizadorLexico.yylex() != AnalizadorLexico1.YYEOF) {
            }

            this.tokens = analizadorLexico.getLista();
            this.errores = analizadorLexico.getListaErrores();
            if (hacer) {
                for (Token token : tokens) {
                    System.out.print(token.getLexema());
                    System.out.print(", " + token.getFila());
                    System.out.print(", " + token.getColumna());
                    System.out.println("");
                }
            }
            hacer = false;
        } catch (Exception e) {
        }
    }

    private void agregarEstilos() {
        Style estiloRojo = editor.addStyle("Rojo", null);
        StyleConstants.setForeground(estiloRojo, Color.RED);
        Style estiloNegro = editor.addStyle("Negro", null);
        StyleConstants.setForeground(estiloNegro, Color.BLACK);
        Style estiloAzul = editor.addStyle("Azul", null);
        StyleConstants.setForeground(estiloAzul, Color.BLUE);
        Style estiloVerde = editor.addStyle("Verde", null);
        StyleConstants.setForeground(estiloVerde, Color.GREEN);
        Style estiloNaranja = editor.addStyle("Naranja", null);
        StyleConstants.setForeground(estiloNaranja, Color.ORANGE);
        Style estiloGris = editor.addStyle("Gris", null);
        StyleConstants.setForeground(estiloGris, Color.LIGHT_GRAY);
        Style estiloAmarillo = editor.addStyle("Amarillo", null);
        StyleConstants.setForeground(estiloAmarillo, Color.YELLOW);
        Style estiloFucsia = editor.addStyle("Fucsia", null);
        StyleConstants.setForeground(estiloFucsia, Color.MAGENTA);
        Style estiloMorado = editor.addStyle("Morado", null);
        StyleConstants.setForeground(estiloMorado, new Color(128, 0, 128));
    }

    private int posicionAbsoluta(int fila, int columna) {
        Element root = editor.getDocument().getDefaultRootElement();
        if (fila >= 1 && fila <= root.getElementCount()) {
            Element filaElement = root.getElement(fila - 1); // Fila es 1-indexed, convertir a 0-indexed
            int posInicioFila = filaElement.getStartOffset();
            int posFinFila = filaElement.getEndOffset();
            int posicionAbsoluta = posInicioFila + columna - 1; // Columna también es 1-indexed
            if (posicionAbsoluta <= posFinFila) {
                return posicionAbsoluta;
            }
        }
        return -1;
    }

    private void colorear() {
        analizar();
        for (Token token : tokens) {
            int pos = posicionAbsoluta(token.getFila(), token.getColumna());
            Style estilo = editor.getStyle(token.getToken().getColor());
            editor.getStyledDocument().setCharacterAttributes(pos, token.getLexema().length(), estilo, false); // Colorea 5 caracteres
        }
    }
}
